tmux-notes
#!gitb

*-- tmux
# http://linuxcommand.org/lc3_adv_termmux.php

Despite its continuing popularity, GNU screen has been criticized for its code complexity (to the point of being called "unmaintainable") and its resource consumption. In addition, it is reported that screen is no longer actively developed. In response to these concerns, a new program, tmux, has attracted widespread attention.

tmux is modern, friendlier, more efficient, and generally superior to screen in most ways. Conceptually, tmux is very similar to screen in that it also supports the concept of sessions, windows and regions (called panes in tmux). In fact, it even shares a few keyboard commands with screen.

*-- Availability

tmux is widely available, though not as widely as screen. It's available in most distribution repositories but, curiously, it's not present in Red Hat/CentOS (as of version 6). The package name is "tmux".

*-- Invocation

The program is invoked with the command tmux new to create a new session. We can optionally add -s <session_name> to assign a name to the new session and -n <window_name> to assign a name to the first window. If no option to the new command is supplied, the new itself may be omitted; it will be assumed. Here is an example:

me@linuxbox: ~ $ tmux new -s "my session" -n "window 1"

Once the program starts, we are presented with a shell prompt and a pretty status bar at the bottom of the window.
Initial tmux window

Initial tmux window

*-- Multiple Windows

tmux uses the keyboard in a similar fashion to screen, but rather than using Ctrl-a as the command prefix, tmux uses Ctrl-b. This is good since Ctrl-a is used when editing the command line in bash to move the cursor to the beginning of the line.

Here are the basic commands for creating windows and navigating them:
Command 	Description
Ctrl-b ? 	Show the list of key bindings (i.e., help)
Ctrl-b c 	Create a new window
Ctrl-b n 	Go to next window
Ctrl-b p 	Go to previous window
Ctrl-b 0 	Go to window 0. Numbers 1-9 are similar.
Ctrl-b w 	Show window list. The status bar lists windows, too.
Ctrl-b , 	Rename the current window
Multiple Panes

Like screen, tmux can divide the terminal display into sections called panes. However, unlike the implementation of regions in screen , panes in tmux do not merely provide viewports to various windows. In tmux they are complete pseudo-terminals associated with the window. Thus a single tmux window can contain multiple terminals.
Command 	Description
Ctrl-b " 	Split pane horizontally
Ctrl-b % 	Split pane vertically
Ctrl-b arrow 	Move to adjoining pane
Ctrl-b Ctrl-arrow 	Resize pane by 1 character
Ctrl-b Alt-arrow 	Resize pane by 5 characters
Ctrl-b x 	Destroy current pane

Ctrl-b [        enables scrolling, q to quit

We can demonstrate the behavior of panes by creating a session and a couple of windows. First, we will create a session, name it, and name the initial window:

# note tmux -2 forces tmux into 256 color mode
me@linuxbox: ~ $ tmux -2 new -s PaneDemo -n Window0

Next, we will create a second window and give it a name:

me@linuxbox: ~ $ tmux neww -n Window1

We could have done this second step with Ctrl-b commands, but seeing the command-line method prepares us for something coming up a little later.

Assuming that all has gone well, we now find ourselves in a tmux session named "PaneDemo" and a window named "Window1". Now we will split the window in two horizontally by typing Ctrl-b ". We still have only two windows (Window0 and Window1), but now have two shell prompts on Window1. We can switch back and forth between the two panes by typing Ctrl-b followed by up arrow or down arrow.

Just for fun, let's type Ctrl-b t and a digital clock appears in the current pane. It's just a cute thing that tmux can do.
Multiple panes

*-- Multiple panes

We can terminate the clock display by typing q. If we move to the first window by typing Ctrl-b 0 we see that the panes remain associated with Window1 and have no effect on Window0.

Returning to Window1, let's adjust the size of the panes. We do this by typing Ctrl-b Alt-arrow to move the boundary up or down by 5 lines. Typing Ctrl-b Ctrl-arrow will move the boundary by 1 line.

It's possible to break a pane out into a new window of its own. This is done by typing Ctrl-b !.

Ctrl-b x is used to destroy a pane. Note that, unlike screen, destroying a pane in tmux also destroys the pseudo-terminal running within it, along with any associated programs.

*-- Copy Mode

Like screen, tmux has a copy mode. It is invoked by typing Ctrl-b [. In copy mode, we can move the cursor freely within the scrollback buffer. To mark text for copying, we first type Ctrl-space to begin selection, then move the cursor to make our selection. Finally, we type Alt-w to copy the selected text.
Text marked for copying

Text marked for copying

As with the digital clock, we return to normal mode by typing "q". Now we can paste our copied text by typing Ctrl-b ].

*-- Detaching Sessions

With tmux it's easier to manage multiple sessions than with screen. First, we can give sessions descriptive names, either during creation, as we saw with our "PaneDemo" example above, or by renaming an existing session with Ctrl-b $. Second, it's easy to switch sessions on-the-fly by typing Ctrl-b s and choosing a session from the presented list.

While we are in a session, we can type Ctrl-b d to detach it and, in essence, put tmux into the background. This is useful if we want to create new a session by entering the tmux new command.

If we start a new terminal (or log in from a remote terminal) and wish to attach an existing session to it, we can issue the command tmux ls to display a list of available sessions. To attach a session, we enter the command tmux attach -d -t <session_name>. The "-d" option causes the session to be detached from its previous terminal. Without this option, the session will be attached to both its previous terminal and the new terminal.

*-- Customizing tmux

As we would expect, tmux is extremely configurable. When tmux starts, it reads the files /etc/tmux.conf and ~./.tmux.conf if they exist. It is also possible to start tmux with the -f option and specify an alternate configuration file. This way, we can have any number of custom configurations.

The number of configuration commands is extensive, just as it is with screen. Refer to the tmux man page for the full list.

As an example, here is a sample configuration file that changes the command prefix key from Ctrl-b to Ctrl-a and creates a new session with 4 windows:

# Sample tmux.conf file

# Change the command prefix from Ctrl-b to Ctrl-a
unbind-key C-b
set-option -g prefix C-a
bind-key C-a send-prefix

#####
# Create session with 4 windows
#####

# Create session and first window
new-session -d -s MySession

# Create second window and vertically split it
new-window
split-window -d -h

# Create third window (and name it) running Midnight Commander
new-window -d -n MdnghtCmdr mc

# Create fourth window (and name it) running htop
new-window -d -n htop htop

# Give focus to the first window in the session
select-window -t 0

Since this configuration creates a new session, we should launch tmux by entering the command tmux attach to avoid the default behavior of automatically creating a new session. Otherwise, we end up with an additional and unwanted session.
